import java.awt.Point;
import java.util.*;

public class SnakeJogador {
	public class SnakePoint implements Comparable<SnakePoint> {
		private Point point;
		private int distFromStart = 0;
		private int distManhattan = 0;

		private SnakePoint parent = null;

		public SnakePoint(Point point) {
			this.point = point;
		}

		public Point getPoint() {
			return point;
		}

		public void setPoint(Point point) {
			this.point = point;
		}

		public void setDistFromStart(int dist) {
			distFromStart = dist;
		}

		public int getDistFromStart() {
			return distFromStart;
		}

		public void setDistManhattan(int dist) {
			distManhattan = dist;
		}

		public int getDistManhattan() {
			return distManhattan;
		}

		public void setParent(SnakePoint parent) {
			this.parent = parent;
		}

		public SnakePoint getParent() {
			return parent;
		}

		public List<SnakePoint> getNeighborhood() {
			Point upPoint = new Point(point.x - 1, point.y);
			Point downPoint = new Point(point.x + 1, point.y);
			Point leftPoint = new Point(point.x, point.y + 1);
			Point rightPoint = new Point(point.x, point.y - 1);

			SnakePoint up = new SnakePoint(upPoint);
			SnakePoint down = new SnakePoint(downPoint);
			SnakePoint left = new SnakePoint(leftPoint);
			SnakePoint right = new SnakePoint(rightPoint);

			List<SnakePoint> list = new ArrayList<>();
			list.add(up);
			list.add(down);
			list.add(left);
			list.add(right);

			return list;
		}

		public boolean equal(SnakePoint snake) {
			if (this.point == snake.point)
				return true;

			if (this.point.x == snake.point.x && this.point.y == snake.point.y)
				return true;

			return false;
		}

		public boolean isEmptyPoint() {
			return jogo.isCelulaLivre(point.x, point.y);
		}

		public int getTotalDist() {
			return distFromStart + distManhattan;
		}

		public int compareTo(SnakePoint anotherPoint) {
			int distTotal = this.getTotalDist();
			int anotherDist = anotherPoint.getTotalDist();

			int distance = distTotal - anotherDist;

			return (distance > 0) ? 1 : (distance < 0) ? -1 : 0;
		}

	}

	private Snake jogo;

	private LinkedList<Character> charPath = new LinkedList<Character>();

	public SnakeJogador(Snake jogo) {
		this.jogo = jogo;
	}

	private int manhattanDist(SnakePoint start, SnakePoint dest) {
		int x = Math.abs(start.getPoint().x - dest.getPoint().x);
		int y = Math.abs(start.getPoint().y - dest.getPoint().y);

		return x + y;
	}

	private LinkedList<SnakePoint> makePath(SnakePoint point) {
		LinkedList<SnakePoint> path = new LinkedList<SnakePoint>();

		while (point.getParent() != null) {
			path.addFirst(point);
			point = point.getParent();
		}

		return path;
	}

	private LinkedList<SnakePoint> searchPath(SnakePoint start, SnakePoint dest) {
		LinkedList<SnakePoint> closedList = new LinkedList<SnakePoint>();
		PriorityQueue<SnakePoint> openList = new PriorityQueue<SnakePoint>();

		start.setDistFromStart(0);
		start.setDistManhattan(manhattanDist(start, dest));
		start.setParent(null);

		openList.add(start);

		while (openList.isEmpty() == false) {
			SnakePoint actualPoint = openList.remove();
			if (actualPoint.equal(dest)) {
				LinkedList<SnakePoint> pathToDest = makePath(actualPoint);
				return pathToDest;
			}

			List<SnakePoint> neighborhood = actualPoint.getNeighborhood();

			for (int i = 0; i < neighborhood.size(); i++) {
				SnakePoint neighborPoint = neighborhood.get(i);

				int distFromStart = actualPoint.getDistFromStart() + manhattanDist(actualPoint, neighborPoint);
				
				boolean inOpenList = openList.contains(neighborPoint);
				boolean inClosedList = closedList.contains(neighborPoint);
				
				if (!inOpenList && !inClosedList) {
					neighborPoint.setParent(actualPoint);
					neighborPoint.setDistFromStart(distFromStart);
					neighborPoint.setDistManhattan(manhattanDist(neighborPoint, dest));
					
					if (neighborPoint.isEmptyPoint()) {
						openList.add(neighborPoint);
					}
				}
				else {
					i = i;
				}
			}
			closedList.add(actualPoint);
		}
		return null;
	}

	private LinkedList<Character> translatePath(SnakePoint snakeHead, LinkedList<SnakePoint> path) {
		LinkedList<Character> directions = new LinkedList<Character>();

		for (int i = 0; i < path.size(); i++) {
			int pathX = path.get(i).point.x;
			int pathY = path.get(i).point.y;

			int headX = snakeHead.getPoint().x;
			int headY = snakeHead.getPoint().y;

			if (pathX == headX) {
				if (pathY == headY - 1) {
					directions.add('C');
				} else if (pathY == headY + 1) {
					directions.add('B');
				}
			} else if (pathY == headY) {
				if (pathX == headX - 1) {
					directions.add('E');
				} else if (pathX == headX + 1) {
					directions.add('D');
				}
			} else {
				directions.add('N');
			}
			snakeHead = path.get(i);
		}

		return directions;
	}

	public char getDirecao() {

		if (charPath.isEmpty()) {
			SnakePoint head = new SnakePoint(jogo.getSegmentos().getFirst());
			SnakePoint food = new SnakePoint(jogo.getComida());
			LinkedList<SnakePoint> path = searchPath(head, food);
			if (path != null) {
				charPath = translatePath(head, path);
				char move = charPath.removeFirst();
				return move;
			} else {
				Point cabeca = jogo.getSegmentos().getFirst();

				ArrayList<Character> possiveisDirecoes = new ArrayList<Character>(4);

				if (jogo.isCelulaLivre(cabeca.x, cabeca.y - 1))
					possiveisDirecoes.add('C');
				if (jogo.isCelulaLivre(cabeca.x + 1, cabeca.y))
					possiveisDirecoes.add('D');
				if (jogo.isCelulaLivre(cabeca.x, cabeca.y + 1))
					possiveisDirecoes.add('B');
				if (jogo.isCelulaLivre(cabeca.x - 1, cabeca.y))
					possiveisDirecoes.add('E');

				if (possiveisDirecoes.size() == 0)
					return 'N';

				int posicao = new Random().nextInt(possiveisDirecoes.size());
				return possiveisDirecoes.get(posicao);
			}
		} else {
			char move = charPath.removeFirst();
			return move;
		}
	}

}
